#pragma kernel ComputeFFT SIZE = 32 PASSES = 5 CHANNEL = x TX = 32 TY = 1 FINAL = 0//0
#pragma kernel ComputeFFT SIZE = 32 PASSES = 5 CHANNEL = y TX = 1 TY = 32 FINAL = 1//1
#pragma kernel ComputeFFT SIZE = 64 PASSES = 6 CHANNEL = x TX = 64 TY = 1 FINAL = 0//2
#pragma kernel ComputeFFT SIZE = 64 PASSES = 6 CHANNEL = y TX = 1 TY = 64 FINAL = 1//3
#pragma kernel ComputeFFT SIZE = 128 PASSES = 7 CHANNEL = x TX = 128 TY = 1 FINAL = 0//4
#pragma kernel ComputeFFT SIZE = 128 PASSES = 7 CHANNEL = y TX = 1 TY = 128 FINAL = 1//5
#pragma kernel ComputeFFT SIZE = 256 PASSES = 8 CHANNEL = x TX = 256 TY = 1 FINAL = 0//6
#pragma kernel ComputeFFT SIZE = 256 PASSES = 8 CHANNEL = y TX = 1 TY = 256 FINAL = 1//7
#pragma kernel ComputeFFT SIZE = 512 PASSES = 9 CHANNEL = x TX = 512 TY = 1 FINAL = 0//8
#pragma kernel ComputeFFT SIZE = 512 PASSES = 9 CHANNEL = y TX = 1 TY = 512 FINAL = 1//9

#pragma kernel ComputeNormal NORMAL_PASS = 1

#ifndef NORMAL_PASS
	Texture2DArray<float2> SpectrumDisplaceX;
	Texture2DArray<float2> SpectrumDisplaceY;
	Texture2DArray<float2> SpectrumDisplaceZ;
	Texture2D<float2> inputButterfly;

	RWTexture2DArray<float2> _displaceY;
	RWTexture2DArray<float2> _displaceX;
	RWTexture2DArray<float2> _displaceZ;
	RWTexture2DArray<float3> _displaceXYZ;

	groupshared float2 intermediatesH[SIZE];
	groupshared float2 scratchH[SIZE];
	groupshared float2 intermediatesX[SIZE];
	groupshared float2 scratchX[SIZE];
	groupshared float2 intermediatesZ[SIZE];
	groupshared float2 scratchZ[SIZE];

	#define MAX_FFT_WAVES_MAX_CASCADES 4
	float3 KWS_WavesDomainScales[MAX_FFT_WAVES_MAX_CASCADES];

	uint crossReversebits(uint x)
	{
		x = ((x >> 1) & 0x55555555u) | ((x & 0x55555555u) << 1);
		x = ((x >> 2) & 0x33333333u) | ((x & 0x33333333u) << 2);
		x = ((x >> 4) & 0x0f0f0f0fu) | ((x & 0x0f0f0f0fu) << 4);
		x = ((x >> 8) & 0x00ff00ffu) | ((x & 0x00ff00ffu) << 8);
		x = ((x >> 16) & 0xffffu) | ((x & 0xffffu) << 16);
		return x;
	}

	void ButterflyPass(float2 butterfly, uint coord, uint passIndex)
	{
		uint indexA, indexB;

		uint offset = 1 << passIndex;
		if ((coord / offset) % 2 == 1)
		{
			indexA = coord - offset;
			indexB = coord;
		}
		else
		{
			indexA = coord;
			indexB = coord + offset;
		}

		if (passIndex == 0)
		{
			indexA = crossReversebits(indexA) >> (32 - PASSES);
			indexB = crossReversebits(indexB) >> (32 - PASSES);
		}

		const bool pingpong = (passIndex % 2) == 0;

		float2 valueA_H, valueB_H;
		float2 valueA_X, valueB_X;
		float2 valueA_Z, valueB_Z;
		if (pingpong)
		{
			valueA_H = intermediatesH[indexA];
			valueB_H = intermediatesH[indexB];

			valueA_X = intermediatesX[indexA];
			valueB_X = intermediatesX[indexB];

			valueA_Z = intermediatesZ[indexA];
			valueB_Z = intermediatesZ[indexB];
		}
		else
		{
			valueA_H = scratchH[indexA];
			valueB_H = scratchH[indexB];

			valueA_X = scratchX[indexA];
			valueB_X = scratchX[indexB];

			valueA_Z = scratchZ[indexA];
			valueB_Z = scratchZ[indexB];
		}

		float2 weight = butterfly.xy;
		float2 weightedValueH = weight * valueB_H.r + weight.gr * valueB_H.g * float2(-1, 1);
		float2 weightedValueX = weight * valueB_X.r + weight.gr * valueB_X.g * float2(-1, 1);
		float2 weightedValueZ = weight * valueB_Z.r + weight.gr * valueB_Z.g * float2(-1, 1);
		float2 resultH = valueA_H + weightedValueH;
		float2 resultX = valueA_X + weightedValueX;
		float2 resultZ = valueA_Z + weightedValueZ;

		if (pingpong)
		{
			scratchH[coord] = resultH;
			scratchX[coord] = resultX;
			scratchZ[coord] = resultZ;
		}
		else
		{
			intermediatesH[coord] = resultH;
			intermediatesX[coord] = resultX;
			intermediatesZ[coord] = resultZ;
		}
	}

	float2 conj(float2 v)
	{
		return float2(v.x, -v.y);
	}

	[numthreads(TX, TY, 1)]
	void ComputeFFT(uint3 id : SV_DispatchThreadID)
	{
		uint coord = id.CHANNEL;
		#if !FINAL
			intermediatesH[coord] = conj(SpectrumDisplaceY[id]);
			intermediatesX[coord] = conj(SpectrumDisplaceX[id]);
			intermediatesZ[coord] = conj(SpectrumDisplaceZ[id]);
		#else
			intermediatesH[coord] = SpectrumDisplaceY[id];
			intermediatesX[coord] = SpectrumDisplaceX[id];
			intermediatesZ[coord] = SpectrumDisplaceZ[id];
		#endif

		[unroll(PASSES)]
		for (uint passIndex = 0; passIndex < PASSES; ++passIndex)
		{
			GroupMemoryBarrierWithGroupSync();
			ButterflyPass(inputButterfly[uint2(coord, passIndex)].xy, coord, passIndex);
		}

		GroupMemoryBarrierWithGroupSync();

		bool pingpong = (PASSES % 2) == 0;
		float2 resultH = pingpong ?  intermediatesH[coord] : scratchH[coord];
		float2 resultX = pingpong ?  intermediatesX[coord] : scratchX[coord];
		float2 resultZ = pingpong ?  intermediatesZ[coord] : scratchZ[coord];
		#if !FINAL
			_displaceY[id] = resultH;
			_displaceX[id] = resultX;
			_displaceZ[id] = resultZ;
		#else
			float sign = ((id.x + id.y) % 2) == 1 ?  - 1.0f : 1.0f;
			float3 res = float3(sign * resultX.x, sign * resultH.x, sign * resultZ.x);
			_displaceXYZ[id] = float3(sign * resultX.x, sign * resultH.x, sign * resultZ.x) * KWS_WavesDomainScales[id.z].xyz;
		#endif
	}

#endif

#ifdef  NORMAL_PASS

	#define MAX_FFT_WAVES_MAX_CASCADES 4
	#define FOAM_DIFFUSION 0.985
	#define MAX_WIND 10.0
	#define FOAM_MIN_WIND 7

	#define FOAM_MIN_STRENGTH 2
	#define FOAM_MAX_STRENGTH 7

	float KWS_WavesDomainSizes[MAX_FFT_WAVES_MAX_CASCADES];
	float KWS_WavesAreaScale;

	Texture2DArray<float3> _displaceXYZ;
	Texture2DArray<float3> KWS_PrevNormalFoamTarget;

	RWTexture2DArray<float3> KWS_NormalFoamTargetRW;
	
	SamplerState sampler_linear_repeat;
	float texelSize;
	float KWS_WindSpeed;
	float KWS_WindTurbulence;
	float KWS_OceanFoamStrength;

	float4 Test4;

	[numthreads(8, 8, 1)]
	void ComputeNormal(uint3 id : SV_DispatchThreadID)
	{
		float domainSize = KWS_WavesDomainSizes[id.z];
		float3 uv = float3(id.xy * texelSize + texelSize * 0.5, id.z);

		float3 right = _displaceXYZ.SampleLevel(sampler_linear_repeat, uv + float3(texelSize, 0, 0), 0).xyz / domainSize;
		float3 left = _displaceXYZ.SampleLevel(sampler_linear_repeat, uv + float3(-texelSize, 0, 0), 0).xyz / domainSize;
		float3 top = _displaceXYZ.SampleLevel(sampler_linear_repeat, uv + float3(0, texelSize, 0), 0).xyz / domainSize;
		float3 down = _displaceXYZ.SampleLevel(sampler_linear_repeat, uv + float3(0, -texelSize, 0), 0).xyz / domainSize;
		float3 diffH = right - left;
		float3 diffV = top - down;

		right += float3(texelSize, 0, 0);
		left += float3(-texelSize, 0, 0);
		top += float3(0, 0, texelSize);
		down += float3(0, 0, -texelSize);

		float3 normal = normalize(cross(top - down, right - left));

		float foam = 0;
		if(id.z > 0 && KWS_WindSpeed > FOAM_MIN_WIND)
		{
			float foamStrength = lerp(FOAM_MIN_STRENGTH, FOAM_MAX_STRENGTH, KWS_OceanFoamStrength);
			float2 Dx = foamStrength * diffH.xz / texelSize;
			float2 Dy = foamStrength *  diffV.xz / texelSize;
			float J = (1.0f + Dx.x) * (1.0f + Dy.y) - Dx.y * Dy.x;

			float normalizedWind = saturate((KWS_WindSpeed - FOAM_MIN_WIND) / (MAX_WIND - FOAM_MIN_WIND));
			
			float foamMask = saturate(-(J - 0.5) * 0.25) * normalizedWind;
			float foamMask2 = id.z > 1 ? foamMask : foamMask * 0.15;
			foamMask2 = lerp(foamMask2, 0, KWS_WindTurbulence);

			foamMask = id.z == 1 ? foamMask : foamMask * 5;
			
			float lastFoam = KWS_PrevNormalFoamTarget[id].y;
			foam = saturate(lerp(foamMask, lastFoam, FOAM_DIFFUSION));
			if(id.z > 1) foam = lerp(foam, foam * 0.25 + 0.75, smoothstep(0.1, 1.0, foamMask2));
		}
		

		KWS_NormalFoamTargetRW[id] = float3(normal.x, foam, normal.z);
	}
#endif
