#define KWS_COMPUTE

#define UINT_MAX_VALUE 4294967295.0
#define _FPS 6.0 // fps = KWS_ShorelineWaves.FPS / 3, because we skipped 2/3 frames

#define _Scale float3(2.48, 1.35, 2.19);
#define _Offset float3(0.36, 0.46, 0.494)
#define _TimeLimit 10.5 //(14.0 * 15.0) / 20.0
//#define _TimeLimit 70.0 //(14.0 * 15.0) / 20.0

#define KWS_DISABLE_POINT_SPOT_SHADOWS

#pragma multi_compile _ STEREO_INSTANCING_ON

#pragma multi_compile _ KWS_FOAM_USE_FAST_MODE
#pragma multi_compile _ USE_MULTIPLE_SIMULATIONS
#pragma multi_compile _ USE_VOLUMETRIC_LIGHT
#pragma multi_compile _ FOAM_RECEIVE_SHADOWS
//#pragma multi_compile _ KWS_USE_SHADOW_POINT_LIGHTS
//#pragma multi_compile _ KWS_USE_SHADOW_SPOT_LIGHTS

#define LIGHT_EVALUATION_NO_CONTACT_SHADOWS

#define PREFER_HALF 0
#define SHADOW_USE_DEPTH_BIAS   0
#define SHADOW_ULTRA_LOW
#define AREA_SHADOW_LOW
#define SHADOW_AUTO_FLIP_NORMAL 0
#define SHADOW_VIEW_BIAS        0
#define USE_DEPTH_BUFFER        0

#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Builtin/BuiltinData.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Sky/PhysicallyBasedSky/PhysicallyBasedSkyCommon.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightEvaluation.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/AtmosphericScattering/AtmosphericScattering.hlsl"

#include "Includes/KWS_VertFragIncludes.cginc"

half3 GetSceneColorAfterWaterPass(float2 uv)
{
	//#if USE_VOLUMETRIC_LIGHT
	//	half3 volumeScattering = GetVolumetricLight(uv).xyz;
	//#else
	//	half3 volumeScattering = GetAmbientColor();
	//#endif
	//float3 underwaterColor = ComputeUnderwaterSurfaceColor(volumeScattering, KW_Transparent, KW_WaterColor.xyz, KW_Turbidity, KW_TurbidityColor.xyz);
	//return underwaterColor;
	return saturate(GetAmbientColorExposed() * 0.25);
}

half3 GetLight(float3 worldPos, float2 screenUV)
{
	float4 lightColor = 0;
	float atten = 1;
	if (_DirectionalShadowIndex >= 0)
	{
		LightLoopContext context;
		context.shadowContext = InitShadowContext();
		PositionInputs posInput;
		DirectionalLightData dirLight = _DirectionalLightDatas[_DirectionalShadowIndex];
		float3 L = -dirLight.forward;
		int cascadeCount;
		posInput.positionWS = worldPos;
		float shadowVal = 1;

		if ((dirLight.volumetricLightDimmer > 0) && (dirLight.volumetricShadowDimmer > 0))
		{
			//ApplyCameraRelativeXR(posInput.positionWS);
			#if defined(FOAM_RECEIVE_SHADOWS)
				if ((dirLight.lightDimmer) > 0 && (dirLight.shadowDimmer > 0))
					shadowVal = GetDirectionalShadowAttenuation(context.shadowContext, screenUV, GetCameraRelativePositionWS(worldPos), 0.0, dirLight.shadowIndex, L);
				
			#endif
		}
		
		lightColor = EvaluateLight_Directional(context, posInput, dirLight);
		
		lightColor.rgb *= lightColor.a;
		#if defined(FOAM_RECEIVE_SHADOWS)
			lightColor.rgb *= shadowVal;
		#endif
	}

	lightColor.rgb = lightColor.rgb * 0.25 + GetAmbientColor() * 0.25; //todo check why lightColor so bright after exposure

	return lightColor.rgb;
}

#include "../Common/CommandPass/KWS_ShorelineFoam_Common.cginc"

#pragma kernel ClearFoamBuffer
#pragma kernel RenderFoamToBuffer
#pragma kernel RenderFoamBufferToTexture